/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views.shared.components.profile;

import controllers.EventController;
import controllers.TicketController;
import java.awt.Dimension;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.Box;
import models.Event;
import models.Ticket;
import models.TicketType;
import utility.Database;
import utility.Session;
import views.shared.components.pnlEvent;

/**
 *
 * @author andre
 */
public class pnlEventHistory extends javax.swing.JPanel {

    /**
     * Creates new form pnlOverview
     */
    private EventController eventController;
    private TicketController ticketController;
    
    public pnlEventHistory() {
        initComponents();
    }
    
    public pnlEventHistory(Database db) {
        eventController = new EventController(db);
        ticketController = new TicketController(db);
        initComponents();
        refreshData();  // Load events and display them as cards
    }
    
    public void refreshData(){
        loadEventHistory();  // Load events and display them as cards
    }

    public void loadEventHistory() {
        // Get the current user's ID (assuming you have a method to get the logged-in user's ID)
        int currentUserId = Session.getCurrentUser().getId();

        // Fetch the user's tickets from the database
        List<Ticket> userTickets = ticketController.getTicketsByUserId(currentUserId);

        if (userTickets == null || userTickets.isEmpty()) {
            System.out.println("No tickets found for this user.");
        } else {
            System.out.println("Tickets fetched: " + userTickets.size());
        }

        pnlCards.removeAll();

        // Use a Set to track added event IDs (to ensure uniqueness)
        Set<Integer> addedEventIds = new HashSet<>();

        // Loop through the tickets and display their associated events
        for (Ticket ticket : userTickets) {
            // Retrieve the ticket type from the ticket
            TicketType ticketType = ticketController.getTicketTypeById(ticket.getTicketTypeId());

            if (ticketType != null) {
                // Retrieve the event for this ticket type
                Event event = eventController.getEventByTicketTypeId(ticketType.getId());

                if (event != null) {
                    // Skip if the event has already been added
                    if (addedEventIds.contains(event.getId())) {
                        continue;  // Skip this ticket if its event is already added
                    }

                    // Get the event's start time and compare it with the current time
                    Timestamp eventTimestamp = event.getStartTimestamp();
                    LocalDateTime eventStartTime = eventTimestamp.toLocalDateTime();
                    LocalDateTime currentTime = LocalDateTime.now();

                    // If the event has already started, skip it
                    if (eventStartTime.isAfter(currentTime)) {
                        continue;
                    }

                    // Create and configure the event panel
                    pnlEvent eventPanel = new pnlEvent(event);
                    eventPanel.setPreferredSize(new Dimension(250, 250));

                    // Add the event panel to the panel for upcoming cards
                    pnlCards.add(eventPanel);

                    // Add the event's ID to the set of added events to ensure uniqueness
                    addedEventIds.add(event.getId());

                    // Add a horizontal strut between event panels (if necessary)
                    if (ticket != userTickets.get(userTickets.size() - 1)) {
                        pnlCards.add(Box.createHorizontalStrut(20));
                    }
                }
            }
        }

        // Revalidate and repaint the panel to display the changes
        pnlCards.revalidate();
        pnlCards.repaint();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hdrMain = new javax.swing.JLabel();
        scrlCards = new javax.swing.JScrollPane();
        pnlCards = new javax.swing.JPanel();

        hdrMain.setFont(new java.awt.Font("Riffic Free Medium", 0, 64)); // NOI18N
        hdrMain.setText("EVENT HISTORY");
        hdrMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        hdrMain.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        pnlCards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        scrlCards.setViewportView(pnlCards);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(hdrMain))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(scrlCards, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(hdrMain, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(115, 115, 115)
                .addComponent(scrlCards, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hdrMain;
    private javax.swing.JPanel pnlCards;
    private javax.swing.JScrollPane scrlCards;
    // End of variables declaration//GEN-END:variables
}
