/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import views.shared.components.dlgAddTicketType;
import java.awt.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.*;
import models.Event;
import models.TicketType;
import models.User;
import raven.datetime.component.date.DatePicker;
import raven.datetime.component.time.TimePicker;
import utility.Database;
import utility.Session;
import views.*;
import views.shared.components.dlgEditTicketType;
import views.shared.components.pnlEvent;

/**
 *
 * @author andre
 */
public class OrganizerEventView extends BaseView {

    /**
     * Creates new form DashboardView
     */
    
    //Ticket handling stuff
    List<TicketType> ticketTypes = new ArrayList<>();
    private DefaultListModel<String> ticketListModel = new DefaultListModel<>();;
    
    private Event daEvent;
    private BaseView parentView;
    
    public OrganizerEventView() {
        initComponents();
    }
    
    public OrganizerEventView(Event event, BaseView parentView) {
        initComponents();
        
        this.daEvent = event;
        this.parentView = parentView;
        
        updateDetails(event);
        initDatetimePickers(event);
    }
    
    private void updateDetails(Event daEvent) {
        hdrMain.setText(daEvent.getName());
        txtEventName.setText(daEvent.getName());
        txtEventLocation.setText(daEvent.getLocation());
        frmTxtStartDate.setText(daEvent.getFormattedStartTime());
        frmTxtEndDate.setText(daEvent.getFormattedEndTime());
        txtDescription.setText(daEvent.getDescription());
        
        ticketListModel.clear();
        
        this.ticketTypes = ticketController.getTicketTypesByEventId(daEvent.getId());
        for (TicketType ticket : ticketTypes) {
            String formattedEntry = String.format(
                    "%s - PHP %.2f - Quantity: %d",
                    ticket.getName(),
                    ticket.getPrice(),
                    ticket.getQuantity()
            );
            ticketListModel.addElement(formattedEntry);
        }
        
        lblTicketsSold.setText("Tickets Sold: " + ticketController.getEventTicketsSold(daEvent.getId()));
        lblRevenue.setText("Revenue: " + eventController.getEventRevenue(daEvent.getId()));
    }
    
    private void initDatetimePickers(Event daEvent){
        //Creates the DatePickers
        DatePicker dpStartDate = new DatePicker();
        dpStartDate.setEditor(frmTxtStartDate);
        dpStartDate.setDateFormat("MM/dd/yyyy");
        
        DatePicker dpEndDate = new DatePicker();
        dpEndDate.setEditor(frmTxtEndDate);
        dpEndDate.setDateFormat("MM/dd/yyyy");
        
        //Creates the TimePickers
        TimePicker tpStartTime = new TimePicker();
        tpStartTime.setEditor(frmTxtStartTime);
        tpStartTime.setColor(new Color(128, 0, 128));
        
        TimePicker tpEndTime = new TimePicker();
        tpEndTime.setEditor(frmTxtEndTime);
        tpEndTime.setColor(new Color(128, 0, 128));
        
        if (daEvent.getStartTimestamp() != null) {
            java.sql.Timestamp startTimestamp = daEvent.getStartTimestamp();
            LocalDate startDate = startTimestamp.toLocalDateTime().toLocalDate(); // Convert to LocalDate
            dpStartDate.setSelectedDate(startDate);

            LocalDateTime startDateTime = startTimestamp.toLocalDateTime(); // Convert to LocalDateTime
            tpStartTime.setSelectedTime(startDateTime.toLocalTime()); // Set the time part
        }

        if (daEvent.getEndTimestamp() != null) {
            java.sql.Timestamp endTimestamp = daEvent.getEndTimestamp();
            LocalDate endDate = endTimestamp.toLocalDateTime().toLocalDate(); // Convert to LocalDate
            dpEndDate.setSelectedDate(endDate);

            LocalDateTime endDateTime = endTimestamp.toLocalDateTime(); // Convert to LocalDateTime
            tpEndTime.setSelectedTime(endDateTime.toLocalTime()); // Set the time part
        }
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlNavBar1 = new views.shared.components.pnlNavBar();
        scrlMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        hdrAnalytics = new javax.swing.JLabel();
        txtEventName = new javax.swing.JTextField();
        lblStartDate = new javax.swing.JLabel();
        lblRevenue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnSaveChanges = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        frmTxtStartDate = new javax.swing.JFormattedTextField();
        lblEventName2 = new javax.swing.JLabel();
        lblEndDate = new javax.swing.JLabel();
        frmTxtEndDate = new javax.swing.JFormattedTextField();
        lblStartTime = new javax.swing.JLabel();
        frmTxtStartTime = new javax.swing.JFormattedTextField();
        lblEndTime = new javax.swing.JLabel();
        frmTxtEndTime = new javax.swing.JFormattedTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        listTicketType = new javax.swing.JList<>();
        lblEndDate1 = new javax.swing.JLabel();
        btnAddTicketType = new javax.swing.JButton();
        lblEventLocation = new javax.swing.JLabel();
        txtEventLocation = new javax.swing.JTextField();
        lblDeleteEvent = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        hdrMain = new javax.swing.JLabel();
        lblEventName3 = new javax.swing.JLabel();
        lblTicketsSold = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eventure - Event");
        setResizable(false);

        pnlMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));

        hdrAnalytics.setFont(new java.awt.Font("Riffic Free Medium", 0, 48)); // NOI18N
        hdrAnalytics.setText("ANALYTICS");
        hdrAnalytics.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        hdrAnalytics.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        txtEventName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtEventName.setPreferredSize(new java.awt.Dimension(225, 30));
        txtEventName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEventNameActionPerformed(evt);
            }
        });

        lblStartDate.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblStartDate.setText("Event Start Date:");
        lblStartDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 20, 20));

        lblRevenue.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblRevenue.setText("Revenue:");
        lblRevenue.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 20, 20));

        txtDescription.setColumns(20);
        txtDescription.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        btnSaveChanges.setBackground(new java.awt.Color(153, 0, 153));
        btnSaveChanges.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnSaveChanges.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveChanges.setText("Save Changes");
        btnSaveChanges.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveChangesMouseClicked(evt);
            }
        });
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(153, 0, 153));
        btnBack.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("Back to Events");
        btnBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBackMouseClicked(evt);
            }
        });
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        frmTxtStartDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        frmTxtStartDate.setPreferredSize(new java.awt.Dimension(225, 30));

        lblEventName2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblEventName2.setText("Event Name:");
        lblEventName2.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 20, 20));

        lblEndDate.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblEndDate.setText("Event End Date:");
        lblEndDate.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 20, 20));

        frmTxtEndDate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        frmTxtEndDate.setPreferredSize(new java.awt.Dimension(225, 30));
        frmTxtEndDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frmTxtEndDateActionPerformed(evt);
            }
        });

        lblStartTime.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblStartTime.setText("Event Start Time:");
        lblStartTime.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 20, 20));

        frmTxtStartTime.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        frmTxtStartTime.setPreferredSize(new java.awt.Dimension(225, 30));

        lblEndTime.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblEndTime.setText("Event End Time:");
        lblEndTime.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 20, 20));

        frmTxtEndTime.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        frmTxtEndTime.setPreferredSize(new java.awt.Dimension(225, 30));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        listTicketType.setModel(ticketListModel);
        listTicketType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTicketTypeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listTicketType);

        lblEndDate1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblEndDate1.setText("Event Ticket Types:");
        lblEndDate1.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 20, 20));

        btnAddTicketType.setBackground(new java.awt.Color(153, 0, 153));
        btnAddTicketType.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnAddTicketType.setForeground(new java.awt.Color(255, 255, 255));
        btnAddTicketType.setText("+");
        btnAddTicketType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddTicketTypeMouseClicked(evt);
            }
        });
        btnAddTicketType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTicketTypeActionPerformed(evt);
            }
        });

        lblEventLocation.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblEventLocation.setText("Event Location:");
        lblEventLocation.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 20, 20));

        txtEventLocation.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtEventLocation.setPreferredSize(new java.awt.Dimension(225, 30));
        txtEventLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEventLocationActionPerformed(evt);
            }
        });

        lblDeleteEvent.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblDeleteEvent.setForeground(new java.awt.Color(204, 0, 51));
        lblDeleteEvent.setText("Delete Event");
        lblDeleteEvent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblDeleteEventMouseClicked(evt);
            }
        });

        hdrMain.setFont(new java.awt.Font("Riffic Free Medium", 0, 64)); // NOI18N
        hdrMain.setText("EVENT NAME");
        hdrMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        hdrMain.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        lblEventName3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblEventName3.setText("Event Description:");
        lblEventName3.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 20, 20));

        lblTicketsSold.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lblTicketsSold.setText("Tickets Sold:");
        lblTicketsSold.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 20, 20, 20));

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEndTime)
                            .addComponent(frmTxtEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblDeleteEvent)
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSaveChanges, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblStartTime)
                                    .addComponent(frmTxtStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))))
                        .addGap(19, 19, 19))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblRevenue)
                            .addComponent(lblEventLocation)
                            .addComponent(lblEventName2)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(txtEventName, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtEventLocation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEndDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlMainLayout.createSequentialGroup()
                                        .addComponent(lblEndDate1)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAddTicketType))
                                    .addComponent(lblStartDate)
                                    .addComponent(frmTxtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(frmTxtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 324, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jSeparator2)
                        .addContainerGap())
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(hdrAnalytics, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(lblTicketsSold)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(hdrMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(279, 279, 279)))
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(lblEventName3)
                    .addContainerGap(991, Short.MAX_VALUE)))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStartDate)
                            .addComponent(lblStartTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(frmTxtStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(frmTxtStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblEndDate)
                            .addComponent(lblEndTime))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(frmTxtEndDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(frmTxtEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblEndDate1)
                                    .addComponent(btnAddTicketType))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(lblDeleteEvent)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSaveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMainLayout.createSequentialGroup()
                            .addComponent(lblEventName2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtEventName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(lblEventLocation)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtEventLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(83, 83, 83)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(41, 41, 41)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hdrAnalytics, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(lblTicketsSold)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblRevenue)
                .addGap(21, 21, 21))
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(hdrMain, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(761, Short.MAX_VALUE)))
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addGap(353, 353, 353)
                    .addComponent(lblEventName3)
                    .addContainerGap(448, Short.MAX_VALUE)))
        );

        scrlMain.setViewportView(pnlMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlNavBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(scrlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlNavBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(scrlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtEventLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEventLocationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEventLocationActionPerformed

    private void btnAddTicketTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTicketTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddTicketTypeActionPerformed

    private void btnAddTicketTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddTicketTypeMouseClicked
        // TODO add your handling code here:
        dlgAddTicketType dialog = new dlgAddTicketType(OrganizerEventView.this, ticketTypes);
        dialog.setVisible(true);

        ticketListModel.clear();
        for (TicketType ticket : ticketTypes) {
            String formattedEntry = String.format(
                "%s - PHP %.2f - Quantity: %d",
                ticket.getName(),
                ticket.getPrice(),
                ticket.getQuantity()
            );
            ticketListModel.addElement(formattedEntry);
        }
    }//GEN-LAST:event_btnAddTicketTypeMouseClicked

    private void listTicketTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTicketTypeMouseClicked
        // TODO add your handling code here:
        int index = listTicketType.locationToIndex(evt.getPoint());
        if (index != -1) {
            TicketType selectedTicket = ticketTypes.get(index);  // Get the TicketType object

            dlgEditTicketType dialog = new dlgEditTicketType(OrganizerEventView.this, selectedTicket);
            dialog.setVisible(true);

            ticketListModel.clear();
            for (TicketType ticket : ticketTypes) {
                String formattedEntry = String.format(
                    "%s - PHP %.2f - Quantity: %d",
                    ticket.getName(),
                    ticket.getPrice(),
                    ticket.getQuantity()
                );
                ticketListModel.addElement(formattedEntry);
            }
        }
    }//GEN-LAST:event_listTicketTypeMouseClicked

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnBackMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBackMouseClicked
        // TODO add your handling code here:
        this.dispose();
        parentView.refreshData();
        // Optionally pass the database connection or user info if needed
        //DashboardController dashboardController = new DashboardController(dashboardView, dbConnection);
        parentView.setVisible(true);
    }//GEN-LAST:event_btnBackMouseClicked

    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveChangesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveChangesActionPerformed

    private void btnSaveChangesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveChangesMouseClicked
        // Gather input data
        String eventName = txtEventName.getText();
        String eventLocation = txtEventLocation.getText();
        String eventDescription = txtDescription.getText();
        String startDate = frmTxtStartDate.getText();
        String endDate = frmTxtEndDate.getText();
        String startTime = frmTxtStartTime.getText();
        String endTime = frmTxtEndTime.getText();

        // Create or update the Event object
        Event event = new Event();
        event.setId(daEvent.getId());
        event.setName(eventName);
        event.setLocation(eventLocation);
        event.setDescription(eventDescription);
        event.setStartTimestamp(startDate, startTime);
        event.setEndTimestamp(endDate, endTime);
        event.setCreatorId(Session.getCurrentUser().getId());

        // Check if it's an existing event (i.e., if it has an ID)
        Event updatedEvent = eventController.updateEvent(event);

        // Provide feedback to the user
        if (updatedEvent != null) {
            boolean ticketSuccess = true;

            for (TicketType daTicket : ticketTypes) {
                TicketType existingTicketType = ticketController.getTicketTypeById(daTicket.getId());
                
                TicketType ticket = new TicketType();
                ticket.setEventId(updatedEvent.getId());
                ticket.setName(daTicket.getName());
                ticket.setPrice(daTicket.getPrice());
                ticket.setQuantity(daTicket.getQuantity());

                // Update the ticket types, or create new ones if needed
                if (existingTicketType == null) {
                    ticketSuccess &= ticketController.createTicketType(ticket); // Update existing ticket
                }
                else{
                    ticket.setId(daTicket.getId());
                    ticketSuccess &= ticketController.updateTicketType(ticket); // Update existing ticket
                }
                
            }

            if (ticketSuccess) {
                JOptionPane.showMessageDialog(this, "Event and ticket types updated successfully!");
            } else {
                JOptionPane.showMessageDialog(this, "Event updated, but failed to add/update ticket types. Please try again.");
            }

            this.dispose(); // Close the dialog or navigate to another view

            parentView.refreshData();
            parentView.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "Failed to update event. Please try again.");
        }
    }//GEN-LAST:event_btnSaveChangesMouseClicked

    private void txtEventNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEventNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEventNameActionPerformed

    private void frmTxtEndDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frmTxtEndDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_frmTxtEndDateActionPerformed

    private void lblDeleteEventMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblDeleteEventMouseClicked
        // TODO add your handling code here:
        // Prompt the user for confirmation before deleting the account
        int confirmation = JOptionPane.showConfirmDialog(this,
            "Are you sure you want to delete this event? This will also delete all tickets related to the event. This action cannot be undone.",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION);

        if (confirmation == JOptionPane.YES_OPTION) {
            // Proceed to delete the user
            boolean deletionSuccess = eventController.deleteEvent(daEvent.getId());

            if (deletionSuccess) {
                JOptionPane.showMessageDialog(this, "Your event has been successfully deleted.");
                // Log the user out or close the application as needed
                this.dispose();
                if (parentView != null) {
                    parentView.refreshData();
                    parentView.setVisible(true);  // Make the parent window visible again
                }
            } else {
                JOptionPane.showMessageDialog(this, "There was an error deleting your event. Please try again.",
                    "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_lblDeleteEventMouseClicked

    public void myInitComponents() {          
        //Creates the DatePickers
        DatePicker dpStartDate = new DatePicker();
        dpStartDate.setEditor(frmTxtStartDate);
        dpStartDate.setDateFormat("MM/dd/yyyy");
        
        DatePicker dpEndDate = new DatePicker();
        dpEndDate.setEditor(frmTxtEndDate);
        dpEndDate.setDateFormat("MM/dd/yyyy");
        
        //Creates the TimePickers
        TimePicker tpStartTime = new TimePicker();
        tpStartTime.setEditor(frmTxtStartTime);
        tpStartTime.setColor(new Color(128, 0, 128));
        
        TimePicker tpEndTime = new TimePicker();
        tpEndTime.setEditor(frmTxtEndTime);
        tpEndTime.setColor(new Color(128, 0, 128));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrganizerEventView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrganizerEventView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrganizerEventView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrganizerEventView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
          
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrganizerEventView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTicketType;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JFormattedTextField frmTxtEndDate;
    private javax.swing.JFormattedTextField frmTxtEndTime;
    private javax.swing.JFormattedTextField frmTxtStartDate;
    private javax.swing.JFormattedTextField frmTxtStartTime;
    private javax.swing.JLabel hdrAnalytics;
    private javax.swing.JLabel hdrMain;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel lblDeleteEvent;
    private javax.swing.JLabel lblEndDate;
    private javax.swing.JLabel lblEndDate1;
    private javax.swing.JLabel lblEndTime;
    private javax.swing.JLabel lblEventLocation;
    private javax.swing.JLabel lblEventName2;
    private javax.swing.JLabel lblEventName3;
    private javax.swing.JLabel lblRevenue;
    private javax.swing.JLabel lblStartDate;
    private javax.swing.JLabel lblStartTime;
    private javax.swing.JLabel lblTicketsSold;
    private javax.swing.JList<String> listTicketType;
    private javax.swing.JPanel pnlMain;
    private views.shared.components.pnlNavBar pnlNavBar1;
    private javax.swing.JScrollPane scrlMain;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtEventLocation;
    private javax.swing.JTextField txtEventName;
    // End of variables declaration//GEN-END:variables
}
