/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Image;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.*;
import models.Event;
import models.Ticket;
import models.TicketType;
import utility.Session;
import views.*;
import views.shared.components.pnlEvent;

/**
 *
 * @author andre
 */
public class DashboardView extends BaseView {

    /**
     * Creates new form DashboardView
     */
    
    public DashboardView() {
        initComponents();
        startClock();
        refreshData();
    }
    
    public void startClock(){
        Thread ct = new Thread(() -> {
            try {
                while (true) {
                    Calendar cal = new GregorianCalendar();
                    int hour = cal.get(Calendar.HOUR_OF_DAY);
                    int minute = cal.get(Calendar.MINUTE);
                    int second = cal.get(Calendar.SECOND);

                    SwingUtilities.invokeLater(() -> {
                        lblClock.setText(String.format("%02d:%02d:%02d", hour, minute, second));
                    });

                    Thread.sleep(1000);
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        
        ct.start();
    }
    
    @Override
    public void refreshData(){
        loadUpcomingCards();  // Load events and display them as cards
        
        if("Organizer".equals(Session.getCurrentUser().getRole())){
            loadYourEventCards();
        }
        
        adjustViewSize(Session.getCurrentUser().getRole());
    }
    
    public void adjustViewSize(String role){
        switch(role){
            case "User":
                pnlMain.setPreferredSize(new java.awt.Dimension(1280, 600));
                break;
            case "Organizer":
                pnlMain.setPreferredSize(new java.awt.Dimension(1280, 1200));
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlNavBar1 = new views.shared.components.pnlNavBar();
        scrlMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        pnlUpcoming = new javax.swing.JPanel();
        hdrUpcoming = new javax.swing.JLabel();
        scrlUpcomingCards = new javax.swing.JScrollPane();
        pnlUpcomingCards = new javax.swing.JPanel();
        hdrMain = new javax.swing.JLabel();
        pnlYourEvents = new javax.swing.JPanel();
        hdrYourEvents = new javax.swing.JLabel();
        scrlYourEventCards = new javax.swing.JScrollPane();
        pnlYourEventCards = new javax.swing.JPanel();
        lblClock = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eventure - Dashboard");
        setResizable(false);

        pnlMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        pnlMain.setPreferredSize(new java.awt.Dimension(1280, 1420));

        pnlUpcoming.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));

        hdrUpcoming.setFont(new java.awt.Font("Riffic Free Medium", 0, 36)); // NOI18N
        hdrUpcoming.setText("Upcoming Events:");
        hdrUpcoming.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        hdrUpcoming.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        scrlUpcomingCards.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrlUpcomingCards.setPreferredSize(new java.awt.Dimension(0, 0));

        pnlUpcomingCards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        scrlUpcomingCards.setViewportView(pnlUpcomingCards);

        javax.swing.GroupLayout pnlUpcomingLayout = new javax.swing.GroupLayout(pnlUpcoming);
        pnlUpcoming.setLayout(pnlUpcomingLayout);
        pnlUpcomingLayout.setHorizontalGroup(
            pnlUpcomingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpcomingLayout.createSequentialGroup()
                .addComponent(hdrUpcoming)
                .addGap(0, 872, Short.MAX_VALUE))
            .addGroup(pnlUpcomingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrlUpcomingCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlUpcomingLayout.setVerticalGroup(
            pnlUpcomingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlUpcomingLayout.createSequentialGroup()
                .addComponent(hdrUpcoming, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrlUpcomingCards, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        hdrMain.setFont(new java.awt.Font("Riffic Free Medium", 0, 64)); // NOI18N
        hdrMain.setText("DASHBOARD");
        hdrMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        hdrMain.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        pnlYourEvents.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));

        hdrYourEvents.setFont(new java.awt.Font("Riffic Free Medium", 0, 36)); // NOI18N
        hdrYourEvents.setText("Your Events:");
        hdrYourEvents.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        hdrYourEvents.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        scrlYourEventCards.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        scrlYourEventCards.setPreferredSize(new java.awt.Dimension(0, 0));

        pnlYourEventCards.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        scrlYourEventCards.setViewportView(pnlYourEventCards);

        javax.swing.GroupLayout pnlYourEventsLayout = new javax.swing.GroupLayout(pnlYourEvents);
        pnlYourEvents.setLayout(pnlYourEventsLayout);
        pnlYourEventsLayout.setHorizontalGroup(
            pnlYourEventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlYourEventsLayout.createSequentialGroup()
                .addComponent(hdrYourEvents)
                .addGap(0, 953, Short.MAX_VALUE))
            .addGroup(pnlYourEventsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrlYourEventCards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnlYourEventsLayout.setVerticalGroup(
            pnlYourEventsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlYourEventsLayout.createSequentialGroup()
                .addComponent(hdrYourEvents, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(scrlYourEventCards, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblClock.setFont(new java.awt.Font("Riffic Free Medium", 0, 48)); // NOI18N
        lblClock.setText("00:00:00");

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlUpcoming, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlYourEvents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblClock)
                .addGap(48, 48, 48))
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addGap(16, 16, 16)
                    .addComponent(hdrMain)
                    .addContainerGap(789, Short.MAX_VALUE)))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(lblClock)
                .addGap(56, 56, 56)
                .addComponent(pnlUpcoming, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(pnlYourEvents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(327, Short.MAX_VALUE))
            .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlMainLayout.createSequentialGroup()
                    .addGap(30, 30, 30)
                    .addComponent(hdrMain, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1281, Short.MAX_VALUE)))
        );

        scrlMain.setViewportView(pnlMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlNavBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlNavBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scrlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void loadUpcomingCards() {
        // Get the current user's ID (assuming you have a method to get the logged-in user's ID)
        int currentUserId = Session.getCurrentUser().getId();

        // Fetch the user's tickets from the database
        List<Ticket> userTickets = ticketController.getTicketsByUserId(currentUserId);

        if (userTickets == null || userTickets.isEmpty()) {
            System.out.println("No tickets found for this user.");
        } else {
            System.out.println("Tickets fetched: " + userTickets.size());
        }

        pnlUpcomingCards.removeAll();

        // Use a Set to track added event IDs (to ensure uniqueness)
        Set<Integer> addedEventIds = new HashSet<>();

        // Loop through the tickets and display their associated events
        for (Ticket ticket : userTickets) {
            // Retrieve the ticket type from the ticket
            TicketType ticketType = ticketController.getTicketTypeById(ticket.getTicketTypeId());

            if (ticketType != null) {
                // Retrieve the event for this ticket type
                Event event = eventController.getEventByTicketTypeId(ticketType.getId());

                if (event != null) {
                    // Skip if the event has already been added
                    if (addedEventIds.contains(event.getId())) {
                        continue;  // Skip this ticket if its event is already added
                    }

                    // Get the event's start time and compare it with the current time
                    Timestamp eventTimestamp = event.getStartTimestamp();
                    LocalDateTime eventStartTime = eventTimestamp.toLocalDateTime();
                    LocalDateTime currentTime = LocalDateTime.now();

                    // If the event has already started, skip it
                    if (eventStartTime.isBefore(currentTime)) {
                        continue;
                    }

                    // Create and configure the event panel
                    pnlEvent eventPanel = new pnlEvent(event);
                    eventPanel.setPreferredSize(new Dimension(250, 250));

                    // Add the event panel to the panel for upcoming cards
                    pnlUpcomingCards.add(eventPanel);

                    // Add the event's ID to the set of added events to ensure uniqueness
                    addedEventIds.add(event.getId());

                    // Add a horizontal strut between event panels (if necessary)
                    if (ticket != userTickets.get(userTickets.size() - 1)) {
                        pnlUpcomingCards.add(Box.createHorizontalStrut(20));
                    }
                }
            }
        }

        // Revalidate and repaint the panel to display the changes
        pnlUpcomingCards.revalidate();
        pnlUpcomingCards.repaint();
    }


    
    public void loadYourEventCards() {
        List<Event> events = eventController.getEvents();

        if (events == null || events.isEmpty()) {
            System.out.println("No events to display.");
        } else {
            System.out.println("Events fetched: " + events.size());
        }

        pnlYourEventCards.removeAll();

        int x;
        
        for (x = 0; x < events.size(); x++) {
            Event event = events.get(x);
            if (event.getCreatorId() != Session.getCurrentUser().getId()){
                continue;
            }
            
            pnlEvent eventPanel = new pnlEvent(event);

            eventPanel.setPreferredSize(new Dimension(250, 250));
            pnlYourEventCards.add(eventPanel);
            
            if (x < events.size() - 1) {
                pnlYourEventCards.add(Box.createHorizontalStrut(20));
            }
        }

        pnlYourEventCards.revalidate();
        pnlYourEventCards.repaint();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashboardView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
          
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashboardView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hdrMain;
    private javax.swing.JLabel hdrUpcoming;
    private javax.swing.JLabel hdrYourEvents;
    private javax.swing.JLabel lblClock;
    private javax.swing.JPanel pnlMain;
    private views.shared.components.pnlNavBar pnlNavBar1;
    private javax.swing.JPanel pnlUpcoming;
    private javax.swing.JPanel pnlUpcomingCards;
    private javax.swing.JPanel pnlYourEventCards;
    private javax.swing.JPanel pnlYourEvents;
    private javax.swing.JScrollPane scrlMain;
    private javax.swing.JScrollPane scrlUpcomingCards;
    private javax.swing.JScrollPane scrlYourEventCards;
    // End of variables declaration//GEN-END:variables
}
