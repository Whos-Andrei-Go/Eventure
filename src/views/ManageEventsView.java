/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import java.awt.*;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Vector;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import models.Event;
import views.*;
import views.shared.components.pnlEvent;
import java.sql.*;
import java.text.SimpleDateFormat;

/**
 *
 * @author andre
 */
public class ManageEventsView extends BaseView {

    /**
     * Creates new form DashboardView
     */
    
    public ManageEventsView() {
        initComponents();
        myInitComponents();
        loadEventsTable();  // Load events and display them as cards
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrlMain = new javax.swing.JScrollPane();
        pnlMain = new javax.swing.JPanel();
        hdrMain = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEvents = new javax.swing.JTable();
        pnlNavBarAdmin1 = new views.shared.components.pnlNavBarAdmin();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Eventure - Manage Events");
        setResizable(false);

        pnlMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));

        hdrMain.setFont(new java.awt.Font("Riffic Free Medium", 0, 64)); // NOI18N
        hdrMain.setText("MANAGE EVENTS");
        hdrMain.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        hdrMain.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        tblEvents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Event ID", "Event Creator ID", "Event Name", "Event Start Time", "Event End Time", "Total TIckets Sold"
            }
        ));
        tblEvents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblEventsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblEvents);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(hdrMain)
                        .addGap(608, 608, 608)))
                .addContainerGap(309, Short.MAX_VALUE))
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(hdrMain, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(806, Short.MAX_VALUE))
        );

        scrlMain.setViewportView(pnlMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 1280, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(pnlNavBarAdmin1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlNavBarAdmin1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(scrlMain, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void refreshData(){
        loadEventsTable();  // Load events and display them as cards
    }
    
    public void loadEventsTable(){
        // Create the query to select events and total tickets sold
        String query = "SELECT e.id, "
                + "e.creator_id, "
                + "e.name, "
                + "e.location, "
                + "e.start_time, "
                + "e.end_time, "
                + "(SELECT COUNT(t.id) FROM Tickets t JOIN TicketTypes tt ON t.ticket_type_id = tt.id WHERE tt.event_id = e.id) AS total_tickets_sold "
                + "FROM Events e";

        try (PreparedStatement stmt = db.getConnection().prepareStatement(query)) {
            ResultSet rs = stmt.executeQuery();

            // Create a vector to hold the column names (headers)
            Vector<String> columnNames = new Vector<>();
            columnNames.add("Event ID");
            columnNames.add("Creator ID");
            columnNames.add("Event Name");
            columnNames.add("Location");
            columnNames.add("Start Time");
            columnNames.add("End Time");
            columnNames.add("Total Tickets Sold");

            // Create a vector to hold the rows of data
            Vector<Vector<Object>> data = new Vector<>();

            // Iterate through the result set to get the data
            while (rs.next()) {
                Vector<Object> row = new Vector<>();
                row.add(rs.getInt("id"));  // Event ID
                row.add(rs.getInt("creator_id"));  // Creator ID
                row.add(rs.getString("name"));  // Event Name
                row.add(rs.getString("location"));  // Location
                row.add(rs.getString("start_time"));  // Start Time
                row.add(rs.getString("end_time"));  // End Time
                row.add(rs.getInt("total_tickets_sold"));  // Total Tickets Sold
                data.add(row);
            }

            // Assuming you have a JTable named tblEvents
             tblEvents.setModel(new DefaultTableModel(data, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            });

            // Close the resources
            rs.close();
            stmt.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void tblEventsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblEventsMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 1) {
            int row = tblEvents.getSelectedRow();
            if (row != -1) {
                int eventId = (int) tblEvents.getValueAt(row, 0);
                editEvent(eventId);
            }
        }
    }//GEN-LAST:event_tblEventsMouseClicked

    private void editEvent(int eventId) {
        // Create a dialog to edit the event
        JDialog dialog = new JDialog();
        dialog.setTitle("Edit Event");
        dialog.setModal(true);

        // Create a panel to hold the form fields
        JPanel panel = new JPanel();
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Add some padding

        // Create form fields
        JTextField eventNameField = new JTextField();
        JTextField eventDescriptionField = new JTextField();
        JTextField eventStartDateField = new JTextField();
        JTextField eventStartTimeField = new JTextField();
        JTextField eventEndDateField = new JTextField();
        JTextField eventEndTimeField = new JTextField();
        JTextField eventLocationField = new JTextField();

        // Load the event's data from the database
        try (PreparedStatement stmt = db.getConnection().prepareStatement("SELECT * FROM Events WHERE id = ?")) {
            stmt.setInt(1, eventId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                eventNameField.setText(rs.getString("name"));
                eventDescriptionField.setText(rs.getString("description"));
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
                SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm");

                eventStartDateField.setText(dateFormat.format(rs.getTimestamp("start_time")));
                eventStartTimeField.setText(timeFormat.format(rs.getTimestamp("start_time")));
                eventEndDateField.setText(dateFormat.format(rs.getTimestamp("end_time")));
                eventEndTimeField.setText(timeFormat.format(rs.getTimestamp("end_time")));
                
                eventLocationField.setText(rs.getString("location"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        // Add the form fields to the panel
        panel.add(new JLabel("Event Name:"));
        panel.add(eventNameField);
        panel.add(new JLabel("Event Description:"));
        panel.add(eventDescriptionField);
        panel.add(new JLabel("Event Start Date:"));
        panel.add(eventStartDateField);
        panel.add(new JLabel("Event Start Time:"));
        panel.add(eventStartTimeField);
        panel.add(new JLabel("Event End Date:"));
        panel.add(eventEndDateField);
        panel.add(new JLabel("Event End Time:"));
        panel.add(eventEndTimeField);
        panel.add(new JLabel("Event Location:"));
        panel.add(eventLocationField);

        // Add a button to save the changes
        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Update the event's data in the database
                Event event = new Event();
                event.setId(eventId);
                event.setCreatorId(eventController.getEventById(eventId).getCreatorId());
                event.setName(eventNameField.getText());
                event.setDescription(eventDescriptionField.getText());
                event.setStartTimestamp(eventStartDateField.getText(), eventStartTimeField.getText());
                event.setEndTimestamp(eventEndDateField.getText(), eventEndTimeField.getText());
                event.setLocation(eventLocationField.getText());

                if (eventController.updateEvent(event) != null) {
                    JOptionPane.showMessageDialog(dialog, "Event updated successfully.");
                    refreshData();
                } else {
                    JOptionPane.showMessageDialog(dialog, "Failed to update event.");
                }

                // Close the dialog
                dialog.dispose();
            }
        });

        // Add the panel and button to the dialog
        dialog.add(panel, BorderLayout.CENTER);
        dialog.add(saveButton, BorderLayout.SOUTH);

        // Set the dialog's size and location
        dialog.setSize(500, 400); // Increased the size
        dialog.setLocationRelativeTo(null);

        // Show the dialog
        dialog.setVisible(true);
    }


    public void myInitComponents() {  
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageEventsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageEventsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageEventsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageEventsView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
          
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageEventsView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hdrMain;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlMain;
    private views.shared.components.pnlNavBarAdmin pnlNavBarAdmin1;
    private javax.swing.JScrollPane scrlMain;
    private javax.swing.JTable tblEvents;
    // End of variables declaration//GEN-END:variables
}
